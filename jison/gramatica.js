/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,14],$V1=[1,16],$V2=[1,30],$V3=[1,22],$V4=[1,23],$V5=[1,24],$V6=[1,25],$V7=[1,26],$V8=[1,27],$V9=[1,28],$Va=[1,29],$Vb=[1,37],$Vc=[1,38],$Vd=[1,39],$Ve=[1,40],$Vf=[1,41],$Vg=[1,36],$Vh=[1,34],$Vi=[1,35],$Vj=[5,35],$Vk=[5,17,19,30,35,39,41,42,43,44,56,62,63,89,90,91,92,93,94,95,96],$Vl=[2,80],$Vm=[1,56],$Vn=[1,60],$Vo=[1,70],$Vp=[1,73],$Vq=[1,72],$Vr=[1,71],$Vs=[1,68],$Vt=[1,69],$Vu=[28,30,34,70],$Vv=[1,84],$Vw=[29,38,69],$Vx=[1,100],$Vy=[1,101],$Vz=[1,102],$VA=[1,103],$VB=[1,104],$VC=[1,105],$VD=[1,106],$VE=[1,107],$VF=[1,108],$VG=[1,109],$VH=[5,17,19,28,29,30,32,35,38,39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,56,62,63,71,76,89,90,91,92,93,94,95,96],$VI=[1,123],$VJ=[1,124],$VK=[1,125],$VL=[1,126],$VM=[1,127],$VN=[1,118],$VO=[1,119],$VP=[1,120],$VQ=[1,121],$VR=[1,122],$VS=[5,17,19,28,29,30,35,38,39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,56,62,63,71,76,89,90,91,92,93,94,95,96],$VT=[1,132],$VU=[28,38],$VV=[5,17,19,28,29,30,32,35,38,39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,56,62,63,69,71,76,89,90,91,92,93,94,95,96],$VW=[5,17,19,28,29,30,32,35,38,39,41,42,43,44,45,46,47,48,49,56,62,63,71,76,89,90,91,92,93,94,95,96],$VX=[5,17,19,28,29,30,32,35,38,39,41,42,43,44,45,46,47,48,49,50,51,56,62,63,71,76,89,90,91,92,93,94,95,96],$VY=[5,17,19,28,29,30,32,35,38,39,41,42,43,44,45,46,47,48,49,50,51,52,53,56,62,63,71,76,89,90,91,92,93,94,95,96],$VZ=[5,17,19,28,29,30,35,38,39,41,42,43,44,45,46,47,48,49,50,51,56,62,63,71,76,89,90,91,92,93,94,95,96],$V_=[5,17,19,28,29,30,35,38,39,41,42,43,44,45,46,47,48,49,50,51,52,53,56,62,63,71,76,89,90,91,92,93,94,95,96],$V$=[1,208],$V01=[1,207],$V11=[1,252],$V21=[38,71],$V31=[5,17,19,28,29,30,35,38,39,41,42,43,44,45,46,47,48,49,56,62,63,71,76,89,90,91,92,93,94,95,96];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"INSTRUCCION":4,"EOF":5,"INSTRUCCIONES":6,"WHILE":7,"DO_WHILE":8,"FOR":9,"IF":10,"ELSE_IF":11,"ELSE":12,"SWITCH":13,"PRINT":14,"PRINTLN":15,"METODO":16,"LLAMAR_METODO":17,"FUNCION":18,"LLAMAR_FUNCION":19,"PRIMITIVOS":20,"VECTORES":21,"BREAK":22,"CONTINUE":23,"RETURN":24,"RUN":25,"run":26,"ParentesisA":27,"ParentesisC":28,"PuntoComa":29,"id":30,"PARAMETROS":31,"DosPuntos":32,"TIPO_DATO":33,"LlaveA":34,"LlaveC":35,"LLAMAR_FUNCION_METODO":36,"void":37,"coma":38,"while":39,"EXPRESION_B":40,"do":41,"for":42,"if":43,"else":44,"mayor":45,"menor":46,"mayorIgual":47,"menorIgual":48,"igualIf":49,"mas":50,"menos":51,"division":52,"multiplicacion":53,"potencia":54,"VALOR":55,"switch":56,"EXPRESION":57,"TIPO_SW":58,"LISTAS_CASE":59,"default":60,"case":61,"Print":62,"Println":63,"EXPRESION_IMPRESION":64,"cadena":65,"decimal":66,"entero":67,"Id_DECLARACION":68,"igual":69,"CorcheteA":70,"CorcheteC":71,"DECLARO_VECTOR":72,"POSICION_VECTOR":73,"new":74,"VECTOR_LISTA":75,"InterrogacionC":76,"ROUND":77,"round":78,"LENGTH":79,"length":80,"TYPEOFF":81,"typeof":82,"TO_STRING":83,"ToString":84,"TOCHAR_ARRAY":85,"toCharArray":86,"True":87,"False":88,"int":89,"double":90,"char":91,"String":92,"boolean":93,"return":94,"break":95,"continue":96,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",17:"LLAMAR_METODO",19:"LLAMAR_FUNCION",26:"run",27:"ParentesisA",28:"ParentesisC",29:"PuntoComa",30:"id",32:"DosPuntos",34:"LlaveA",35:"LlaveC",37:"void",38:"coma",39:"while",41:"do",42:"for",43:"if",44:"else",45:"mayor",46:"menor",47:"mayorIgual",48:"menorIgual",49:"igualIf",50:"mas",51:"menos",52:"division",53:"multiplicacion",54:"potencia",56:"switch",60:"default",61:"case",62:"Print",63:"Println",65:"cadena",66:"decimal",67:"entero",69:"igual",70:"CorcheteA",71:"CorcheteC",74:"new",76:"InterrogacionC",78:"round",80:"length",82:"typeof",84:"ToString",86:"toCharArray",87:"True",88:"False",89:"int",90:"double",91:"char",92:"String",93:"boolean",94:"return",95:"break",96:"continue"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[25,4],[18,9],[36,4],[16,9],[31,4],[31,2],[7,7],[8,8],[9,6],[10,7],[11,8],[12,4],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,4],[40,4],[40,3],[40,3],[40,3],[40,3],[40,1],[13,6],[58,4],[58,1],[58,3],[59,5],[59,5],[59,4],[59,4],[14,5],[15,5],[64,3],[64,1],[64,1],[64,1],[20,5],[20,8],[20,4],[20,7],[20,3],[20,4],[20,4],[21,7],[21,9],[21,3],[72,5],[72,8],[72,5],[72,9],[75,3],[75,1],[73,4],[73,7],[68,3],[68,1],[57,3],[57,4],[57,4],[57,3],[57,3],[57,3],[57,3],[57,7],[57,7],[57,7],[57,7],[57,7],[57,1],[57,1],[77,4],[79,4],[81,4],[83,4],[85,4],[55,1],[55,1],[55,1],[55,1],[55,1],[55,1],[55,1],[55,1],[33,1],[33,1],[33,1],[33,1],[33,1],[24,3],[24,2],[22,2],[23,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
console.log("termine analizar, recursiva por la derecha c:");
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V0,18:15,19:$V1,20:17,21:18,22:19,23:20,24:21,30:$V2,33:31,39:$V3,41:$V4,42:$V5,43:$V6,44:$V7,56:$V8,62:$V9,63:$Va,68:32,73:33,89:$Vb,90:$Vc,91:$Vd,92:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi},{1:[3]},{5:[1,42]},o($Vj,[2,3],{6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,18:15,20:17,21:18,22:19,23:20,24:21,33:31,68:32,73:33,4:43,17:$V0,19:$V1,30:$V2,39:$V3,41:$V4,42:$V5,43:$V6,44:$V7,56:$V8,62:$V9,63:$Va,89:$Vb,90:$Vc,91:$Vd,92:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi}),o($Vk,[2,4]),o($Vk,[2,5]),o($Vk,[2,6]),o($Vk,[2,7]),o($Vk,[2,8]),o($Vk,[2,9]),o($Vk,[2,10]),o($Vk,[2,11]),o($Vk,[2,12]),o($Vk,[2,13]),o($Vk,[2,14]),o($Vk,[2,15]),o($Vk,[2,16]),o($Vk,[2,17]),o($Vk,[2,18]),o($Vk,[2,19]),o($Vk,[2,20]),o($Vk,[2,21]),{27:[1,44]},{34:[1,45]},{27:[1,46]},{27:[1,47]},{34:[1,49],43:[1,48]},{27:[1,50]},{27:[1,51]},{27:[1,52]},o([38,69],$Vl,{27:[1,53],50:[1,54],51:[1,55],70:$Vm}),{30:[1,58],68:57},{38:$Vn,69:[1,59]},{69:[1,61]},{29:[1,62]},{29:[1,63]},{29:[1,65],30:$Vo,36:74,40:64,55:66,65:$Vp,66:$Vq,67:$Vr,73:67,87:$Vs,88:$Vt},o($Vu,[2,108]),o($Vu,[2,109]),o($Vu,[2,110]),o($Vu,[2,111]),o($Vu,[2,112]),{1:[2,1]},o($Vj,[2,2]),{30:$Vo,36:74,40:75,55:66,65:$Vp,66:$Vq,67:$Vr,73:67,87:$Vs,88:$Vt},{4:76,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V0,18:15,19:$V1,20:17,21:18,22:19,23:20,24:21,30:$V2,33:31,39:$V3,41:$V4,42:$V5,43:$V6,44:$V7,56:$V8,62:$V9,63:$Va,68:32,73:33,89:$Vb,90:$Vc,91:$Vd,92:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi},{28:[1,77]},{30:$Vo,36:74,40:78,55:66,65:$Vp,66:$Vq,67:$Vr,73:67,87:$Vs,88:$Vt},{27:[1,79]},{4:80,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V0,18:15,19:$V1,20:17,21:18,22:19,23:20,24:21,30:$V2,33:31,39:$V3,41:$V4,42:$V5,43:$V6,44:$V7,56:$V8,62:$V9,63:$Va,68:32,73:33,89:$Vb,90:$Vc,91:$Vd,92:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi},{30:$Vo,36:74,55:82,57:81,65:$Vp,66:$Vq,67:$Vr,73:67,77:83,78:$Vv,87:$Vs,88:$Vt},{30:$Vo,36:74,40:85,55:66,65:$Vp,66:$Vq,67:$Vr,73:67,87:$Vs,88:$Vt},{30:$Vo,36:74,40:86,55:66,65:$Vp,66:$Vq,67:$Vr,73:67,87:$Vs,88:$Vt},{31:87,33:88,89:$Vb,90:$Vc,91:$Vd,92:$Ve,93:$Vf},{50:[1,89]},{51:[1,90]},{30:$Vo,36:74,55:82,57:91,65:$Vp,66:$Vq,67:$Vr,73:67,77:83,78:$Vv,87:$Vs,88:$Vt},{29:[1,93],38:$Vn,69:[1,92]},o($Vw,$Vl,{70:[1,94]}),{27:[1,96],30:$Vo,36:74,55:82,57:95,65:$Vp,66:$Vq,67:$Vr,73:67,77:83,78:$Vv,87:$Vs,88:$Vt},{30:[1,97]},{30:$Vo,36:74,55:82,57:98,65:$Vp,66:$Vq,67:$Vr,73:67,77:83,78:$Vv,87:$Vs,88:$Vt},o($Vk,[2,115]),o($Vk,[2,116]),{29:[1,99],45:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG},o($Vk,[2,114]),o($VH,[2,46]),o($VH,[2,100]),o($VH,[2,101]),o($VH,[2,102]),o($VH,[2,103],{27:[1,110],70:$Vm}),o($VH,[2,104]),o($VH,[2,105]),o($VH,[2,106]),o($VH,[2,107]),{28:[1,111],45:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG},{35:[1,112]},{34:[1,113]},{28:[1,114],45:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG},{30:$Vo,36:74,40:115,55:66,65:$Vp,66:$Vq,67:$Vr,73:67,87:$Vs,88:$Vt},{35:[1,116]},{28:[1,117],45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR},o($VS,[2,93]),o($VS,[2,94]),{27:[1,128]},{28:[1,129],45:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG},{28:[1,130],45:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG},{28:[1,131],38:$VT},{30:[1,133]},{29:[1,134]},{29:[1,135]},{45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,71:[1,136]},{27:[1,138],30:$Vo,36:74,55:82,57:137,65:$Vp,66:$Vq,67:$Vr,73:67,77:83,78:$Vv,87:$Vs,88:$Vt},o($Vk,[2,65]),{71:[1,139]},{29:[1,140],45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR},{33:141,89:$Vb,90:$Vc,91:$Vd,92:$Ve,93:$Vf},o($Vw,[2,79]),o($Vk,[2,70],{45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR}),o($Vk,[2,113]),{30:$Vo,36:74,40:142,55:66,65:$Vp,66:$Vq,67:$Vr,73:67,87:$Vs,88:$Vt},{30:$Vo,36:74,40:143,55:66,65:$Vp,66:$Vq,67:$Vr,73:67,87:$Vs,88:$Vt},{30:$Vo,36:74,40:144,55:66,65:$Vp,66:$Vq,67:$Vr,73:67,87:$Vs,88:$Vt},{30:$Vo,36:74,40:145,55:66,65:$Vp,66:$Vq,67:$Vr,73:67,87:$Vs,88:$Vt},{30:$Vo,36:74,40:146,55:66,65:$Vp,66:$Vq,67:$Vr,73:67,87:$Vs,88:$Vt},{30:$Vo,36:74,40:147,50:[1,148],55:66,65:$Vp,66:$Vq,67:$Vr,73:67,87:$Vs,88:$Vt},{30:$Vo,36:74,40:150,51:[1,149],55:66,65:$Vp,66:$Vq,67:$Vr,73:67,87:$Vs,88:$Vt},{30:$Vo,36:74,40:151,55:66,65:$Vp,66:$Vq,67:$Vr,73:67,87:$Vs,88:$Vt},{30:$Vo,36:74,40:152,55:66,65:$Vp,66:$Vq,67:$Vr,73:67,87:$Vs,88:$Vt},{30:$Vo,36:74,40:153,55:66,65:$Vp,66:$Vq,67:$Vr,73:67,87:$Vs,88:$Vt},{31:154,33:88,89:$Vb,90:$Vc,91:$Vd,92:$Ve,93:$Vf},{34:[1,155]},{39:[1,156]},{4:157,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V0,18:15,19:$V1,20:17,21:18,22:19,23:20,24:21,30:$V2,33:31,39:$V3,41:$V4,42:$V5,43:$V6,44:$V7,56:$V8,62:$V9,63:$Va,68:32,73:33,89:$Vb,90:$Vc,91:$Vd,92:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi},{34:[1,158]},{28:[1,159],45:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG},o($Vk,[2,33]),{34:[1,160]},{30:$Vo,36:74,50:[1,162],55:82,57:161,65:$Vp,66:$Vq,67:$Vr,73:67,77:83,78:$Vv,87:$Vs,88:$Vt},{30:$Vo,36:74,51:[1,163],55:82,57:164,65:$Vp,66:$Vq,67:$Vr,73:67,77:83,78:$Vv,87:$Vs,88:$Vt},{30:$Vo,36:74,55:82,57:165,65:$Vp,66:$Vq,67:$Vr,73:67,77:83,78:$Vv,87:$Vs,88:$Vt},{30:$Vo,36:74,55:82,57:166,65:$Vp,66:$Vq,67:$Vr,73:67,77:83,78:$Vv,87:$Vs,88:$Vt},{30:$Vo,36:74,55:82,57:167,65:$Vp,66:$Vq,67:$Vr,73:67,77:83,78:$Vv,87:$Vs,88:$Vt},{30:$Vo,36:74,55:82,57:168,65:$Vp,66:$Vq,67:$Vr,73:67,77:83,78:$Vv,87:$Vs,88:$Vt},{30:$Vo,36:74,55:82,57:169,65:$Vp,66:$Vq,67:$Vr,73:67,77:83,78:$Vv,87:$Vs,88:$Vt},{30:$Vo,36:74,55:82,57:170,65:$Vp,66:$Vq,67:$Vr,73:67,77:83,78:$Vv,87:$Vs,88:$Vt},{30:$Vo,36:74,55:82,57:171,65:$Vp,66:$Vq,67:$Vr,73:67,77:83,78:$Vv,87:$Vs,88:$Vt},{30:$Vo,36:74,55:82,57:172,65:$Vp,66:$Vq,67:$Vr,73:67,77:83,78:$Vv,87:$Vs,88:$Vt},{30:$Vo,36:74,55:173,65:$Vp,66:$Vq,67:$Vr,73:67,87:$Vs,88:$Vt},{29:[1,174]},{29:[1,175]},{32:[1,176]},{33:177,89:$Vb,90:$Vc,91:$Vd,92:$Ve,93:$Vf},o($VU,[2,27]),o($Vk,[2,66]),o($Vk,[2,67]),o($VV,[2,77],{70:[1,178]}),{29:[1,179],45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR},{33:180,89:$Vb,90:$Vc,91:$Vd,92:$Ve,93:$Vf},{69:[1,181],70:[1,182]},o($Vk,[2,63]),{28:[1,183]},o($VW,[2,34],{50:$VC,51:$VD,52:$VE,53:$VF,54:$VG}),o($VW,[2,35],{50:$VC,51:$VD,52:$VE,53:$VF,54:$VG}),o($VW,[2,36],{50:$VC,51:$VD,52:$VE,53:$VF,54:$VG}),o($VW,[2,37],{50:$VC,51:$VD,52:$VE,53:$VF,54:$VG}),o($VW,[2,38],{50:$VC,51:$VD,52:$VE,53:$VF,54:$VG}),o($VX,[2,39],{52:$VE,53:$VF,54:$VG}),{30:$Vo,36:74,40:184,55:66,65:$Vp,66:$Vq,67:$Vr,73:67,87:$Vs,88:$Vt},{30:$Vo,36:74,40:185,55:66,65:$Vp,66:$Vq,67:$Vr,73:67,87:$Vs,88:$Vt},o($VX,[2,42],{52:$VE,53:$VF,54:$VG}),o($VY,[2,43],{54:$VG}),o($VY,[2,44],{54:$VG}),o($VH,[2,45]),{28:[1,186],38:$VT},{4:187,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V0,18:15,19:$V1,20:17,21:18,22:19,23:20,24:21,30:$V2,33:31,39:$V3,41:$V4,42:$V5,43:$V6,44:$V7,56:$V8,62:$V9,63:$Va,68:32,73:33,89:$Vb,90:$Vc,91:$Vd,92:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi},{27:[1,188]},{35:[1,189]},{4:190,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V0,18:15,19:$V1,20:17,21:18,22:19,23:20,24:21,30:$V2,33:31,39:$V3,41:$V4,42:$V5,43:$V6,44:$V7,56:$V8,62:$V9,63:$Va,68:32,73:33,89:$Vb,90:$Vc,91:$Vd,92:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi},{34:[1,191]},{35:[1,192]},o($VZ,[2,81],{52:$VP,53:$VQ,54:$VR}),{30:$Vo,36:74,55:82,57:193,65:$Vp,66:$Vq,67:$Vr,73:67,77:83,78:$Vv,87:$Vs,88:$Vt},{30:$Vo,36:74,55:82,57:194,65:$Vp,66:$Vq,67:$Vr,73:67,77:83,78:$Vv,87:$Vs,88:$Vt},o($VZ,[2,84],{52:$VP,53:$VQ,54:$VR}),o($V_,[2,85],{54:$VR}),o($V_,[2,86],{54:$VR}),o($VS,[2,87]),{45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,76:[1,195]},{45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,76:[1,196]},{45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,76:[1,197]},{45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,76:[1,198]},{45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,76:[1,199]},{28:[1,200]},o($Vk,[2,55]),o($Vk,[2,56]),{33:202,37:[1,201],89:$Vb,90:$Vc,91:$Vd,92:$Ve,93:$Vf},{30:[1,203]},{30:$Vo,36:74,55:82,57:204,65:$Vp,66:$Vq,67:$Vr,73:67,77:83,78:$Vv,87:$Vs,88:$Vt},o($Vk,[2,61]),{28:[1,205]},{70:$V$,72:206,74:$V01},{71:[1,209]},{30:$Vo,36:74,55:82,57:210,65:$Vp,66:$Vq,67:$Vr,73:67,77:83,78:$Vv,87:$Vs,88:$Vt},o($VX,[2,40],{52:$VE,53:$VF,54:$VG}),o($VX,[2,41],{52:$VE,53:$VF,54:$VG}),o($VH,[2,24]),{35:[1,211]},{30:$Vo,36:74,40:212,55:66,65:$Vp,66:$Vq,67:$Vr,73:67,87:$Vs,88:$Vt},o($Vk,[2,30]),{35:[1,213]},{4:214,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V0,18:15,19:$V1,20:17,21:18,22:19,23:20,24:21,30:$V2,33:31,39:$V3,41:$V4,42:$V5,43:$V6,44:$V7,56:$V8,62:$V9,63:$Va,68:32,73:33,89:$Vb,90:$Vc,91:$Vd,92:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi},o($Vk,[2,47]),o($VZ,[2,82],{52:$VP,53:$VQ,54:$VR}),o($VZ,[2,83],{52:$VP,53:$VQ,54:$VR}),{30:$Vo,36:74,40:215,55:66,65:$Vp,66:$Vq,67:$Vr,73:67,87:$Vs,88:$Vt},{30:$Vo,36:74,40:216,55:66,65:$Vp,66:$Vq,67:$Vr,73:67,87:$Vs,88:$Vt},{30:$Vo,36:74,40:217,55:66,65:$Vp,66:$Vq,67:$Vr,73:67,87:$Vs,88:$Vt},{30:$Vo,36:74,40:218,55:66,65:$Vp,66:$Vq,67:$Vr,73:67,87:$Vs,88:$Vt},{30:$Vo,36:74,40:219,55:66,65:$Vp,66:$Vq,67:$Vr,73:67,87:$Vs,88:$Vt},o($VS,[2,95]),{34:[1,220]},{34:[1,221]},o($VU,[2,26]),{45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,71:[1,222]},{30:$Vo,36:74,55:82,57:223,65:$Vp,66:$Vq,67:$Vr,73:67,77:83,78:$Vv,87:$Vs,88:$Vt},{29:[1,224]},{33:225,89:$Vb,90:$Vc,91:$Vd,92:$Ve,93:$Vf},{70:[1,226]},{69:[1,227]},{29:[1,228],45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR},o($Vk,[2,28]),{28:[1,229],45:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG},o($Vk,[2,31]),{35:[1,230]},{32:[1,231],45:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG},{32:[1,232],45:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG},{32:[1,233],45:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG},{32:[1,234],45:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG},{32:[1,235],45:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG},{4:236,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V0,18:15,19:$V1,20:17,21:18,22:19,23:20,24:21,30:$V2,33:31,39:$V3,41:$V4,42:$V5,43:$V6,44:$V7,56:$V8,62:$V9,63:$Va,68:32,73:33,89:$Vb,90:$Vc,91:$Vd,92:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi},{4:237,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V0,18:15,19:$V1,20:17,21:18,22:19,23:20,24:21,30:$V2,33:31,39:$V3,41:$V4,42:$V5,43:$V6,44:$V7,56:$V8,62:$V9,63:$Va,68:32,73:33,89:$Vb,90:$Vc,91:$Vd,92:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi},o($VV,[2,78]),{29:[1,238],45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR},o($Vk,[2,68]),{70:[1,239]},{30:$Vo,36:74,55:82,57:241,65:$Vp,66:$Vq,67:$Vr,73:67,75:240,77:83,78:$Vv,87:$Vs,88:$Vt},{70:$V$,72:242,74:$V01},o($Vk,[2,64]),o($Vk,[2,29]),o($Vk,[2,32]),{30:$Vo,36:74,40:243,55:66,65:$Vp,66:$Vq,67:$Vr,73:67,87:$Vs,88:$Vt},{30:$Vo,36:74,40:244,55:66,65:$Vp,66:$Vq,67:$Vr,73:67,87:$Vs,88:$Vt},{30:$Vo,36:74,40:245,55:66,65:$Vp,66:$Vq,67:$Vr,73:67,87:$Vs,88:$Vt},{30:$Vo,36:74,40:246,55:66,65:$Vp,66:$Vq,67:$Vr,73:67,87:$Vs,88:$Vt},{30:$Vo,36:74,40:247,55:66,65:$Vp,66:$Vq,67:$Vr,73:67,87:$Vs,88:$Vt},{35:[1,248]},{35:[1,249]},o($Vk,[2,62]),{30:$Vo,36:74,55:82,57:250,65:$Vp,66:$Vq,67:$Vr,73:67,77:83,78:$Vv,87:$Vs,88:$Vt},{38:$V11,71:[1,251]},o($V21,[2,76],{45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR}),{29:[1,253]},o($V31,[2,88],{50:$VC,51:$VD,52:$VE,53:$VF,54:$VG}),o($V31,[2,89],{50:$VC,51:$VD,52:$VE,53:$VF,54:$VG}),o($V31,[2,90],{50:$VC,51:$VD,52:$VE,53:$VF,54:$VG}),o($V31,[2,91],{50:$VC,51:$VD,52:$VE,53:$VF,54:$VG}),o($V31,[2,92],{50:$VC,51:$VD,52:$VE,53:$VF,54:$VG}),o($Vk,[2,25]),o($Vk,[2,23]),{45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,71:[1,254]},{38:[1,256],71:[1,255]},{30:$Vo,36:74,55:82,57:257,65:$Vp,66:$Vq,67:$Vr,73:67,77:83,78:$Vv,87:$Vs,88:$Vt},o($Vk,[2,69]),{29:[2,71],70:[1,258]},{29:[2,73]},{70:[1,259]},o($V21,[2,75],{45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR}),{30:$Vo,36:74,55:82,57:260,65:$Vp,66:$Vq,67:$Vr,73:67,77:83,78:$Vv,87:$Vs,88:$Vt},{30:$Vo,36:74,55:82,57:241,65:$Vp,66:$Vq,67:$Vr,73:67,75:261,77:83,78:$Vv,87:$Vs,88:$Vt},{45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,71:[1,262]},{38:$V11,71:[1,263]},{29:[2,72]},{71:[1,264]},{29:[2,74]}],
defaultActions: {42:[2,1],255:[2,73],262:[2,72],264:[2,74]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
                console.log("reconoci el token <decimal> con lexema : "+yy_.yytext);
                return 66;
                
break;
case 1:
                console.log("reconoci el token <entero> con lexema : "+yy_.yytext);
                return 67;
            
break;
case 2:
                console.log("reconoci el token <comentario> con lexema : "+yy_.yytext);
            
break;
case 3:
                    console.log("reconoci el token <comentarioMulti> con lexema : "+yy_.yytext);
                
break;
case 4:
                console.log("reconoci el token <coma> con lexema : "+yy_.yytext);
                return 38;
            
break;
case 5:
                console.log("reconoci el token <if> con lexema : "+yy_.yytext);
                return 43;
            
break;
case 6:
                console.log("reconoci el token <else> con lexema : "+yy_.yytext);
                return 44;
            
break;
case 7:
                console.log("reconoci el token <while> con lexema : "+yy_.yytext);
                return 39;
            
break;
case 8:
                console.log("reconoci el token <for> con lexema : "+yy_.yytext);
                return 42;
            
break;
case 9:
                console.log("reconoci el token <do> con lexema : "+yy_.yytext);
                return 41;
            
break;
case 10:
                console.log("reconoci el token <break> con lexema : "+yy_.yytext);
                return 95;
            
break;
case 11:
                console.log("reconoci el token <continue> con lexema : "+yy_.yytext);
                return 96;
            
break;
case 12:
                console.log("reconoci el token <void> con lexema : "+yy_.yytext);
                return 37;
            
break;
case 13:
                console.log("reconoci el token <switch> con lexema : "+yy_.yytext);
                return 56;
            
break;
case 14:
                console.log("reconoci el token <case> con lexema : "+yy_.yytext);
                return 61;
            
break;
case 15:
                console.log("reconoci el token <default> con lexema : "+yy_.yytext);
                return 60;
            
break;
case 16:
                console.log("reconoci el token <Println> con lexema : "+yy_.yytext);
                return 63;
            
break;
case 17:
                console.log("reconoci el token <Print> con lexema : "+yy_.yytext);
                return 62;
            
break;
case 18:
                console.log("reconoci el token <toLower> con lexema : "+yy_.yytext);
                return 'toLower';
            
break;
case 19:
                console.log("reconoci el token <toUpper> con lexema : "+yy_.yytext);
                return 'toUpper';
            
break;
case 20:
                console.log("reconoci el token <round> con lexema : "+yy_.yytext);
                return 78;
            
break;
case 21:
                console.log("reconoci el token <length> con lexema : "+yy_.yytext);
                return 80;
            
break;
case 22:
                console.log("reconoci el token <typeof> con lexema : "+yy_.yytext);
                return 82;
            
break;
case 23:
                console.log("reconoci el token <toString> con lexema : "+yy_.yytext);
                return 84;
            
break;
case 24:
                console.log("reconoci el token <toCharArray> con lexema : "+yy_.yytext);
                return 86;
            
break;
case 25:
                console.log("reconoci el token <run> con lexema : "+yy_.yytext);
                return 26;
               
break;
case 26:
                console.log("reconoci el token <new> con lexema : "+yy_.yytext);
                return 74;
               
break;
case 27:
                console.log("reconoci el token <int> con lexema : "+yy_.yytext);
                return 89;
               
break;
case 28:
                console.log("reconoci el token <run> con lexema : "+yy_.yytext);
                return 90;
               
break;
case 29:
                console.log("reconoci el token <run> con lexema : "+yy_.yytext);
                return 91;
               
break;
case 30:
                console.log("reconoci el token <run> con lexema : "+yy_.yytext);
                return 93;
               
break;
case 31:
                console.log("reconoci el token <run> con lexema : "+yy_.yytext);
                return 92;
               
break;
case 32:
                console.log("reconoci el token <true> con lexema : "+yy_.yytext);
                return 87;
               
break;
case 33:
                console.log("reconoci el token <false> con lexema : "+yy_.yytext);
                return 88;
               
break;
case 34:
                console.log("reconoci el token <DosPuntos> con lexema : "+yy_.yytext);
                return 32;
            
break;
case 35:
                console.log("reconoci el token <PuntoComa> con lexema : "+yy_.yytext);
                return 29;
            
break;
case 36:
                console.log("reconoci el token <ParentesisA> con lexema : "+yy_.yytext);
                return 27;
            
break;
case 37:
                console.log("reconoci el token <ParentesisC> con lexema : "+yy_.yytext);
                return 28;
            
break;
case 38:
                console.log("reconoci el token <CorcheteA> con lexema : "+yy_.yytext);
                return 70;
            
break;
case 39:
                console.log("reconoci el token <CorcheteC> con lexema : "+yy_.yytext);
                return 71;
            
break;
case 40:
                console.log("reconoci el token <LlaveA> con lexema : "+yy_.yytext);
                return 34;
            
break;
case 41:
                console.log("reconoci el token <LlaveC> con lexema : "+yy_.yytext);
                return 35;
            
break;
case 42:
                console.log("reconoci el token <mas> con lexema : "+yy_.yytext);
                return 50;
            
break;
case 43:
                console.log("reconoci el token <menos> con lexema : "+yy_.yytext);
                return 51;
            
break;
case 44:
                console.log("reconoci el token <multiplicacion> con lexema : "+yy_.yytext);
                return 53;
            
break;
case 45:
                console.log("reconoci el token <division> con lexema : "+yy_.yytext);
                return 52;
            
break;
case 46:
                console.log("reconoci el token <potencia> con lexema : "+yy_.yytext);
                return 54;
            
break;
case 47:
                console.log("reconoci el token <modulo> con lexema : "+yy_.yytext);
                return 'modulo';
            
break;
case 48:
                console.log("reconoci el token <igualIf> con lexema : "+yy_.yytext);
                return 49;
            
break;
case 49:
                console.log("reconoci el token <igual> con lexema : "+yy_.yytext);
                return 69;
            
break;
case 50:
                console.log("reconoci el token <desIgual> con lexema : "+yy_.yytext);
                return 'desIgual';
            
break;
case 51:
                console.log("reconoci el token <menor> con lexema : "+yy_.yytext);
                return 46;
            
break;
case 52:
                console.log("reconoci el token <menorIgual> con lexema : "+yy_.yytext);
                return 48;
            
break;
case 53:
                console.log("reconoci el token <mayor> con lexema : "+yy_.yytext);
                return 45;
            
break;
case 54:
                console.log("reconoci el token <mayorIgual> con lexema : "+yy_.yytext);
                return 47;
            
break;
case 55:
                console.log("reconoci el token <Interrogacion> con lexema : "+yy_.yytext);
                return 76;
            
break;
case 56:
                console.log("reconoci el token <or> con lexema : "+yy_.yytext);
                return 'or';
            
break;
case 57:
                console.log("reconoci el token <and> con lexema : "+yy_.yytext);
                return 'and';
            
break;
case 58:
                console.log("reconoci el token <not> con lexema : "+yy_.yytext);
                return 'not';
            
break;
case 59:
                                                console.log("reconoci el token <cadena> con lexema : "+yy_.yytext);
                                                return 65;
                                            
break;
case 60:
                                                console.log("reconoci el token <cadena> con lexema : "+yy_.yytext);
                                                return 65;
                                            
break;
case 61:
                            console.log("reconoci el token <id> con lexema : "+yy_.yytext);
                            return 30;
                            
break;
case 62:
break;
case 63:
break;
case 64:
break;
case 65:
break;
case 66:return 5;
break;
case 67:
                console.log('Este es un error lexico : '+yy_.yytext+", en la linea : "+yy_.yylloc.first_line+", columna : "+yy_.yylloc.fisrt_column);
            
break;
}
},
rules: [/^(?:[0-9]+\.[0-9]+)/i,/^(?:[0-9]+)/i,/^(?:\/\/[^\n]*)/i,/^(?:\/\*[^"*/"]*\*\/)/i,/^(?:,)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:void\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:Println\b)/i,/^(?:Print\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:round\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:toString\b)/i,/^(?:toCharArray\b)/i,/^(?:run\b)/i,/^(?:new\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:string\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?::)/i,/^(?:;)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:==)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:<=)/i,/^(?:>)/i,/^(?:>=)/i,/^(?:\?)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:'[^\']*')/i,/^(?:"[^\"]*")/i,/^(?:[a-zA-Z](_|[0-9]|[a-zA-Z])*)/i,/^(?:\t)/i,/^(?:\r)/i,/^(?:\n)/i,/^(?:\s)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}