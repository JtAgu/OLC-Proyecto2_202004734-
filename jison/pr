
";"         {
                console.log("reconoci el token <puntoComa> con lexema : "+yytext);
                return 'puntoComa';
            }

":"         {
                console.log("reconoci el token <DosPuntos> con lexema : "+yytext);
                return 'DosPuntos';
            }

"("         {
                console.log("reconoci el token <ParentesisA> con lexema : "+yytext);
                return 'ParentesisA';
            }

")"         {
                console.log("reconoci el token <ParentesisC> con lexema : "+yytext);
                return 'ParentesisC';
            }

"["         {
                console.log("reconoci el token <CorcheteA> con lexema : "+yytext);
                return 'CorcheteA';
            }

"]"         {
                console.log("reconoci el token <CorcheteC> con lexema : "+yytext);
                return 'CorcheteC';
            }

"{"         {
                console.log("reconoci el token <LlaveA> con lexema : "+yytext);
                return 'ParentesisA';
            }

"}"         {
                console.log("reconoci el token <LlaveC> con lexema : "+yytext);
                return 'ParentesisC';
            }

"+"         {
                console.log("reconoci el token <mas> con lexema : "+yytext);
                return 'mas';
            }

"-"         {
                console.log("reconoci el token <menos> con lexema : "+yytext);
                return 'menos';
            }

"*"         {
                console.log("reconoci el token <multiplicacion> con lexema : "+yytext);
                return 'multiplicacion';
            }

"/"         {
                console.log("reconoci el token <division> con lexema : "+yytext);
                return 'division';
            }

"^"         {
                console.log("reconoci el token <potencia> con lexema : "+yytext);
                return 'potencia';
            }

"%"         {
                console.log("reconoci el token <modulo> con lexema : "+yytext);
                return 'modulo';
            }


"=="         {
                console.log("reconoci el token <igualIf> con lexema : "+yytext);
                return 'igualIf';
            }

"="         {
                console.log("reconoci el token <igual> con lexema : "+yytext);
                return 'igual';
            }

"!="         {
                console.log("reconoci el token <desIgual> con lexema : "+yytext);
                return 'desIgual';
            }

"<"         {
                console.log("reconoci el token <menor> con lexema : "+yytext);
                return 'menor';
            }

"<="         {
                console.log("reconoci el token <menorIgual> con lexema : "+yytext);
                return 'menorIgual';
            }

">"         {
                console.log("reconoci el token <mayor> con lexema : "+yytext);
                return 'mayor';
            }

">="         {
                console.log("reconoci el token <mayorIgual> con lexema : "+yytext);
                return 'mayorIgual';
            }

"?"         {
                console.log("reconoci el token <Interrogacion> con lexema : "+yytext);
                return 'Interrogacion';
            }

"||"         {
                console.log("reconoci el token <or> con lexema : "+yytext);
                return 'or';
            }

"&&"         {
                console.log("reconoci el token <and> con lexema : "+yytext);
                return 'and';
            }

"!"         {
                console.log("reconoci el token <not> con lexema : "+yytext);
                return 'not';
            }

"if"         {
                console.log("reconoci el token <if> con lexema : "+yytext);
                return 'if';
            }


"else"         {
                console.log("reconoci el token <else> con lexema : "+yytext);
                return 'else';
            }

"while"         {
                console.log("reconoci el token <while> con lexema : "+yytext);
                return 'while';
            }

"for"         {
                console.log("reconoci el token <for> con lexema : "+yytext);
                return 'for';
            }

"do"         {
                console.log("reconoci el token <do> con lexema : "+yytext);
                return 'do';
            }

"break"         {
                console.log("reconoci el token <break> con lexema : "+yytext);
                return 'break';
            }

"continue"         {
                console.log("reconoci el token <continue> con lexema : "+yytext);
                return 'continue';
            }


"switch"         {
                console.log("reconoci el token <switch> con lexema : "+yytext);
                return 'switch';
            }

"case"         {
                console.log("reconoci el token <case> con lexema : "+yytext);
                return 'case';
            }


"Println"         {
                console.log("reconoci el token <Println> con lexema : "+yytext);
                return 'Println';
            }


"Print"         {
                console.log("reconoci el token <Print> con lexema : "+yytext);
                return 'Println';
            }

"toLower"         {
                console.log("reconoci el token <toLower> con lexema : "+yytext);
                return 'toLower';
            }

"toUpper"         {
                console.log("reconoci el token <toUpper> con lexema : "+yytext);
                return 'toUpper';
            }

"round"         {
                console.log("reconoci el token <round> con lexema : "+yytext);
                return 'round';
            }

"length"         {
                console.log("reconoci el token <length> con lexema : "+yytext);
                return 'length';
            }

"typeof"         {
                console.log("reconoci el token <typeof> con lexema : "+yytext);
                return 'typeof';
            }

"toString"         {
                console.log("reconoci el token <toString> con lexema : "+yytext);
                return 'toString';
            }


"toCharArray"         {
                console.log("reconoci el token <toCharArray> con lexema : "+yytext);
                return 'toCharArray';
            }

"run"         {
                console.log("reconoci el token <run> con lexema : "+yytext);
                return 'run';
               }


"int"         {
                console.log("reconoci el token <run> con lexema : "+yytext);
                return 'run';
               }

"double"         {
                console.log("reconoci el token <run> con lexema : "+yytext);
                return 'run';
               }

"char"         {
                console.log("reconoci el token <run> con lexema : "+yytext);
                return 'run';
               }

"boolean"      {
                console.log("reconoci el token <run> con lexema : "+yytext);
                return 'run';
               }

"string"        {
                console.log("reconoci el token <run> con lexema : "+yytext);
                return 'run';
               }


([\"][^\n\\"]* [\"]) | ([\'][^\n\\']* [\'])   {
                                                console.log("reconoci el token <cadena> con lexema : "+yytext);
                                                return 'cadena';
                                            }


[a-zA-Z]("_"|[0-9]|[a-zA-Z])*   {
                            console.log("reconoci el token <id> con lexema : "+yytext);
                            return 'id';
                            }

[0-9]+"."[0-9]+      {
                console.log("reconoci el token <decimal> con lexema : "+yytext);
                return 'decimal';
                }

[0-9]+      {
                console.log("reconoci el token <entero> con lexema : "+yytext);
                return 'entero';
            }

"//"[^\n]*  {
                console.log("reconoci el token <comentario> con lexema : "+yytext);
            }

"/*"[^"/*"]*    {
                    console.log("reconoci el token <comentarioMulti> con lexema : "+yytext);
                }






%left 'or'
%left 'and'
%right 'not'
%left 'igualIf' 'desIgual' 'mayor' 'mayorIgual' 'menor' 'menorIgual'
%left 'mas' 'menos'
%left 'division' 'multiplicacion'
%left 'potencia'
%right UMENOS



jison gramatica.jison


