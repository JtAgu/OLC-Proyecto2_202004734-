/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,8],$V1=[1,12],$V2=[1,14],$V3=[1,13],$V4=[1,15],$V5=[1,16],$V6=[1,17],$V7=[1,18],$V8=[1,19],$V9=[5,11,21,32,33,34,35,36,37,38],$Va=[18,21,24],$Vb=[16,20,28],$Vc=[1,45],$Vd=[1,36],$Ve=[1,37],$Vf=[1,39],$Vg=[1,40],$Vh=[1,41],$Vi=[1,42],$Vj=[1,43],$Vk=[1,44],$Vl=[1,48],$Vm=[1,59],$Vn=[1,60],$Vo=[1,61],$Vp=[1,62],$Vq=[1,63],$Vr=[1,64],$Vs=[1,65],$Vt=[1,66],$Vu=[1,67],$Vv=[1,68],$Vw=[1,69],$Vx=[1,70],$Vy=[1,71],$Vz=[1,72],$VA=[18,20,22,23,25,30,31,39,40,41,42,43,44,45,46,47,48,49,51],$VB=[18,20,22,23,25,28,30,31,39,40,41,42,43,44,45,46,47,48,49,51],$VC=[18,20,22,23,25,49,51],$VD=[18,20,22,23,25,30,31,43,44,45,46,47,48,49,51],$VE=[18,20,22,23,25,43,44,45,46,47,48,49,51],$VF=[1,134],$VG=[25,28];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"INSTRUCCION":4,"EOF":5,"INSTRUCCIONES":6,"DECLARACION":7,"ASIGNACION":8,"PRINT":9,"PRINT_LN":10,"DECLARACION_VACIO":11,"CASTEO_D":12,"INCREMENTO_DECREMENTO":13,"TIPO_DATO":14,"ID_DECLARACION":15,"igual":16,"ParentesisA":17,"ParentesisC":18,"EXPRESION":19,"PuntoComa":20,"id":21,"InterrogacionC":22,"DosPuntos":23,"CorcheteA":24,"CorcheteC":25,"new":26,"LISTA_VALORES":27,"coma":28,"VALOR":29,"mas":30,"menos":31,"Println":32,"Print":33,"int":34,"double":35,"char":36,"String":37,"boolean":38,"division":39,"modulo":40,"multiplicacion":41,"potencia":42,"igualIf":43,"mayor":44,"menor":45,"mayorIgual":46,"menorIgual":47,"diferente":48,"and":49,"not":50,"or":51,"True":52,"False":53,"entero":54,"decimal":55,"cadena":56,"ValChar":57,"GET_VECTOR":58,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",11:"DECLARACION_VACIO",16:"igual",17:"ParentesisA",18:"ParentesisC",20:"PuntoComa",21:"id",22:"InterrogacionC",23:"DosPuntos",24:"CorcheteA",25:"CorcheteC",26:"new",28:"coma",30:"mas",31:"menos",32:"Println",33:"Print",34:"int",35:"double",36:"char",37:"String",38:"boolean",39:"division",40:"modulo",41:"multiplicacion",42:"potencia",43:"igualIf",44:"mayor",45:"menor",46:"mayorIgual",47:"menorIgual",48:"diferente",49:"and",50:"not",51:"or",52:"True",53:"False",54:"entero",55:"decimal",56:"cadena",57:"ValChar"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[12,8],[12,7],[7,5],[7,3],[7,9],[7,11],[7,16],[7,9],[7,15],[27,3],[27,1],[15,3],[15,1],[8,4],[8,8],[8,7],[13,4],[13,4],[10,5],[9,5],[14,1],[14,1],[14,1],[14,1],[14,1],[19,2],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,2],[19,3],[19,3],[19,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[58,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
console.log("termine analizar, recursiva por la derecha c:"); return $$[$0-1];
break;
case 2:
$$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 3: case 21: case 23:
this.$=[$$[$0]]
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 63:
this.$=$$[$0]
break;
case 11:
this.$=new Casteo($$[$0-6],$$[$0-7],$$[$0-1],$$[$0-3],_$[$0-7].first_line,_$[$0-7].fisrt_column)
break;
case 12:
this.$=new CasteoAsig($$[$0-6],$$[$0-1],$$[$0-3],_$[$0-6].first_line,_$[$0-6].fisrt_column)
break;
case 13:
this.$= new Declaracion($$[$0-3],$$[$0-4],$$[$0-1],_$[$0-4].first_line,_$[$0-4].fisrt_column);
break;
case 14:
this.$= new DeclaracionVacio($$[$0-1],$$[$0-2],_$[$0-2].first_line,_$[$0-2].fisrt_column);
break;
case 15:
this.$= new DeclaracionTernario($$[$0-7],$$[$0-8],$$[$0-5],$$[$0-3],$$[$0-1],_$[$0-8].first_line,_$[$0-8].fisrt_column);
break;
case 16:
this.$= new DeclaracionVectorNew($$[$0-9],$$[$0-10],$$[$0-2],_$[$0-10].first_line,_$[$0-10].fisrt_column);
break;
case 18:
this.$= new DeclaracionVectorLista($$[$0-7],$$[$0-8],$$[$0-2],_$[$0-8].first_line,_$[$0-8].fisrt_column);
break;
case 20: case 22:
$$[$0-2].push($$[$0]); this.$=$$[$0-2];
break;
case 24:
this.$= new Asignacion($$[$0-3],$$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column)
break;
case 25:
this.$= new AsignacionTernario($$[$0-7],$$[$0-5],$$[$0-3],$$[$0-1],_$[$0-7].first_line,_$[$0-7].fisrt_column);
break;
case 26:
this.$= new AsignacionVector($$[$0-6],$$[$0-4],$$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column)
break;
case 27:
this.$= new Incremento($$[$0-3], _$[$0-3].first_line, _$[$0-3].first_column)
break;
case 28:
this.$= new Decremento($$[$0-3], _$[$0-3].first_line, _$[$0-3].first_column)
break;
case 29:
this.$= new PrintLn($$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column)
break;
case 30:
this.$= new Print($$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column)
break;
case 31:
this.$=Type.NUMBER
break;
case 32:
this.$=Type.DECIMAL
break;
case 33:
this.$=Type.CHAR
break;
case 34:
this.$=Type.STRING
break;
case 35:
this.$=Type.BOOLEAN
break;
case 36:
this.$=new Arithmetic($$[$0],$$[$0],ArithmeticOption.NEGACION, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 37:
this.$=new Arithmetic($$[$0-2], $$[$0-2],ArithmeticOption.INCR,   _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 38:
this.$=new Arithmetic($$[$0-2], $$[$0-2],ArithmeticOption.DECR,   _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 39:
this.$=new Arithmetic($$[$0-2], $$[$0],ArithmeticOption.MAS,   _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 40:
this.$=new Arithmetic($$[$0-2], $$[$0],ArithmeticOption.MENOS,   _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 41:
this.$=new Arithmetic($$[$0-2], $$[$0],ArithmeticOption.DIV,   _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 42:
this.$=new Arithmetic($$[$0-2], $$[$0],ArithmeticOption.MODULO,   _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 43:
this.$=new Arithmetic($$[$0-2], $$[$0],ArithmeticOption.MULTIPLICACION,   _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 44:
this.$=new Arithmetic($$[$0-2], $$[$0],ArithmeticOption.POT,   _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 45:
this.$=new relacional($$[$0-2], $$[$0],RelacionalOption.IGUAL,   _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 46:
this.$=new relacional($$[$0-2], $$[$0],RelacionalOption.MAYOR,   _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 47:
this.$=new relacional($$[$0-2], $$[$0],RelacionalOption.MENOR,   _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 48:
this.$=new relacional($$[$0-2], $$[$0],RelacionalOption.MAYORIGUAL,   _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 49:
this.$=new relacional($$[$0-2], $$[$0],RelacionalOption.MENORIGUAL,   _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 50:
this.$=new relacional($$[$0-2], $$[$0],RelacionalOption.DIFERENTE,   _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 51:
this.$=new logic($$[$0-2], $$[$0],LogicOption.AND,   _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 52:
this.$=new logic($$[$0], $$[$0],LogicOption.NOT,   _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 53:
this.$=new logic($$[$0-2], $$[$0],LogicOption.OR,   _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 54:
 this.$ = $$[$0-1]; 
break;
case 55:
this.$=$$[$0];
break;
case 56: case 57:
this.$= new Literal($$[$0],Type.BOOLEAN,  _$[$0].first_line, _$[$0].first_column)
break;
case 58:
this.$= new Literal($$[$0],Type.NUMBER,  _$[$0].first_line, _$[$0].first_column)
break;
case 59:
this.$= new Literal($$[$0],Type.DECIMAL,  _$[$0].first_line, _$[$0].first_column)
break;
case 60:
this.$= new Literal($$[$0],Type.STRING,  _$[$0].first_line, _$[$0].first_column)
break;
case 61:
this.$= new Literal($$[$0],Type.CHAR,  _$[$0].first_line, _$[$0].first_column)
break;
case 62:
this.$= new GetId($$[$0],  _$[$0].first_line, _$[$0].first_column)
break;
case 64:
this.$= new GetVector($$[$0-3], $$[$0-1] , _$[$0-3].first_line, _$[$0-3].first_column)
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:$V0,12:9,13:10,14:11,21:$V1,32:$V2,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8},{1:[3]},{5:[1,20],6:21,7:4,8:5,9:6,10:7,11:$V0,12:9,13:10,14:11,21:$V1,32:$V2,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8},o($V9,[2,3]),o($V9,[2,4]),o($V9,[2,5]),o($V9,[2,6]),o($V9,[2,7]),o($V9,[2,8]),o($V9,[2,9]),o($V9,[2,10]),{15:22,21:[1,23]},{16:[1,24],24:[1,25],30:[1,26],31:[1,27]},{17:[1,28]},{17:[1,29]},o($Va,[2,31]),o($Va,[2,32]),o($Va,[2,33]),o($Va,[2,34]),o($Va,[2,35]),{1:[2,1]},o($V9,[2,2]),{16:[1,30],20:[1,31],28:[1,32]},o($Vb,[2,23],{24:[1,33]}),{17:[1,35],19:34,21:$Vc,29:38,31:$Vd,50:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:46},{17:$Vl,19:47,21:$Vc,29:38,31:$Vd,50:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:46},{30:[1,49]},{31:[1,50]},{17:$Vl,19:51,21:$Vc,29:38,31:$Vd,50:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:46},{17:$Vl,19:52,21:$Vc,29:38,31:$Vd,50:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:46},{17:[1,54],19:53,21:$Vc,29:38,31:$Vd,50:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:46},o($V9,[2,14]),{21:[1,55]},{25:[1,56]},{20:[1,57],22:[1,58],30:$Vm,31:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz},{14:73,17:$Vl,19:74,21:$Vc,29:38,31:$Vd,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,50:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:46},{17:$Vl,19:75,21:$Vc,29:38,31:$Vd,50:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:46},{17:$Vl,19:76,21:$Vc,29:38,31:$Vd,50:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:46},o($VA,[2,55]),o($VB,[2,56]),o($VB,[2,57]),o($VB,[2,58]),o($VB,[2,59]),o($VB,[2,60]),o($VB,[2,61]),o($VB,[2,62],{24:[1,77]}),o($VB,[2,63]),{25:[1,78],30:$Vm,31:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz},{17:$Vl,19:74,21:$Vc,29:38,31:$Vd,50:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:46},{20:[1,79]},{20:[1,80]},{18:[1,81],30:$Vm,31:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz},{18:[1,82],30:$Vm,31:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz},{20:[1,83],22:[1,84],30:$Vm,31:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz},{14:85,17:$Vl,19:74,21:$Vc,29:38,31:$Vd,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,50:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:46},o($Vb,[2,22]),{16:[1,86],24:[1,87]},o($V9,[2,24]),{17:$Vl,19:88,21:$Vc,29:38,31:$Vd,50:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:46},{17:$Vl,19:90,21:$Vc,29:38,30:[1,89],31:$Vd,50:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:46},{17:$Vl,19:92,21:$Vc,29:38,31:[1,91],50:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:46},{17:$Vl,19:93,21:$Vc,29:38,31:$Vd,50:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:46},{17:$Vl,19:94,21:$Vc,29:38,31:$Vd,50:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:46},{17:$Vl,19:95,21:$Vc,29:38,31:$Vd,50:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:46},{17:$Vl,19:96,21:$Vc,29:38,31:$Vd,50:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:46},{17:$Vl,19:97,21:$Vc,29:38,31:$Vd,50:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:46},{17:$Vl,19:98,21:$Vc,29:38,31:$Vd,50:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:46},{17:$Vl,19:99,21:$Vc,29:38,31:$Vd,50:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:46},{17:$Vl,19:100,21:$Vc,29:38,31:$Vd,50:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:46},{17:$Vl,19:101,21:$Vc,29:38,31:$Vd,50:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:46},{17:$Vl,19:102,21:$Vc,29:38,31:$Vd,50:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:46},{17:$Vl,19:103,21:$Vc,29:38,31:$Vd,50:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:46},{17:$Vl,19:104,21:$Vc,29:38,31:$Vd,50:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:46},{18:[1,105]},{18:[1,106],30:$Vm,31:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz},o($VA,[2,36]),o($VC,[2,52],{30:$Vm,31:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx}),{17:$Vl,19:107,21:$Vc,29:38,31:$Vd,50:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:46},{16:[1,108]},o($V9,[2,27]),o($V9,[2,28]),{20:[1,109]},{20:[1,110]},o($V9,[2,13]),{17:$Vl,19:111,21:$Vc,29:38,31:$Vd,50:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:46},{18:[1,112]},{24:[1,114],26:[1,113]},{25:[1,115]},{23:[1,116],30:$Vm,31:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz},o($VA,[2,37]),o($VD,[2,39],{39:$Vo,40:$Vp,41:$Vq,42:$Vr}),o($VA,[2,38],{29:38,58:46,19:75,17:$Vl,21:$Vc,50:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk}),o($VD,[2,40],{39:$Vo,40:$Vp,41:$Vq,42:$Vr}),o($VA,[2,41]),o($VA,[2,42]),o($VA,[2,43]),o($VA,[2,44]),o($VE,[2,45],{30:$Vm,31:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr}),o($VE,[2,46],{30:$Vm,31:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr}),o($VE,[2,47],{30:$Vm,31:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr}),o($VE,[2,48],{30:$Vm,31:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr}),o($VE,[2,49],{30:$Vm,31:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr}),o($VE,[2,50],{30:$Vm,31:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr}),o($VC,[2,51],{30:$Vm,31:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx}),o([18,20,22,23,25,51],[2,53],{30:$Vm,31:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy}),{17:$Vl,19:117,21:$Vc,29:38,31:$Vd,50:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:46},o($VA,[2,54]),{25:[1,118],30:$Vm,31:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz},{17:$Vl,19:119,21:$Vc,29:38,31:$Vd,50:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:46},o($V9,[2,30]),o($V9,[2,29]),{23:[1,120],30:$Vm,31:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz},{17:$Vl,19:121,21:$Vc,29:38,31:$Vd,50:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:46},{14:122,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8},{21:$Vc,24:[1,124],27:123,29:125,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:46},{16:[1,126]},{17:$Vl,19:127,21:$Vc,29:38,31:$Vd,50:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:46},{20:[1,128],30:$Vm,31:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz},o($VB,[2,64]),{20:[1,129],30:$Vm,31:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz},{17:$Vl,19:130,21:$Vc,29:38,31:$Vd,50:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:46},{20:[1,131],30:$Vm,31:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz},{24:[1,132]},{25:[1,133],28:$VF},{21:$Vc,27:135,29:125,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:46},o($VG,[2,21]),{26:[1,136]},{20:[1,137],30:$Vm,31:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz},o($V9,[2,12]),o($V9,[2,26]),{20:[1,138],30:$Vm,31:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz},o($V9,[2,11]),{17:$Vl,19:139,21:$Vc,29:38,31:$Vd,50:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:46},{20:[1,140]},{21:$Vc,29:141,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:46},{25:[1,142],28:$VF},{14:143,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8},o($V9,[2,25]),o($V9,[2,15]),{25:[1,144],30:$Vm,31:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz},o($V9,[2,18]),o($VG,[2,20]),{28:[1,145]},{24:[1,146]},{20:[1,147]},{24:[1,148]},{17:$Vl,19:149,21:$Vc,29:38,31:$Vd,50:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:46},o($V9,[2,16]),{21:$Vc,27:150,29:125,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:46},{25:[1,151],30:$Vm,31:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz},{25:[1,152],28:$VF},{24:[1,153]},{25:[1,154]},{17:$Vl,19:155,21:$Vc,29:38,31:$Vd,50:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:46},{20:[1,156]},{25:[1,157],30:$Vm,31:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz},o($V9,[2,19]),{20:[1,158]},o($V9,[2,17])],
defaultActions: {20:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const {Declaracion} = require('../instruccion/Declaracion');
    const {DeclaracionVacio} = require('../instruccion/DeclaracionVacio');
    const {DeclaracionTernario} = require('../instruccion/DeclaracionTernario');
    const {DeclaracionVectorNew} = require('../instruccion/DeclaracionVectorNew');
    const {DeclaracionVectorLista} = require('../instruccion/DeclaracionVectorLista');
    const {AsignacionVector} = require('../instruccion/AsignacionVector');

    const {Type} = require('../simbolos/Type');
    const {Arithmetic} = require('../expression/aritmeticas');
    const {relacional} = require('../expression/relacionales');
    const {logic} = require('../expression/logic');

    const {GetId} = require('../expression/GetId');
    const {GetVector} = require('../expression/GetVector');

    const {ArithmeticOption} = require('../expression/aritmeticOption');
    const {RelacionalOption} = require('../expression/relacionalOption');
    const {LogicOption} = require('../expression/logicOption');
    const {Literal} = require('../expression/literal');
    const {PrintLn} = require('../Instruccion/println');
    const {Asignacion} = require('../Instruccion/Asignacion');
    const {AsignacionTernario} = require('../Instruccion/AsignacionTernario');
    const {Print} = require('../Instruccion/print');
    const {Casteo} = require('../Instruccion/Casteo');
    const {CasteoAsig} = require('../Instruccion/CasteoAsig');
    const {Incremento} = require('../Instruccion/Incremento');
    const {Decremento} = require('../Instruccion/decremento');
    
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
                console.log("reconoci el token <decimal> con lexema : "+yy_.yytext);
                return 55;
                
break;
case 1:
                console.log("reconoci el token <entero> con lexema : "+yy_.yytext);
                return 54;
            
break;
case 2:
                console.log("reconoci el token <comentario> con lexema : "+yy_.yytext);
            
break;
case 3:
                    console.log("reconoci el token <comentarioMulti> con lexema : "+yy_.yytext);
                
break;
case 4:
                console.log("reconoci el token <coma> con lexema : "+yy_.yytext);
                return 28;
            
break;
case 5:
                console.log("reconoci el token <if> con lexema : "+yy_.yytext);
                return 'if';
            
break;
case 6:
                console.log("reconoci el token <else> con lexema : "+yy_.yytext);
                return 'else';
            
break;
case 7:
                console.log("reconoci el token <while> con lexema : "+yy_.yytext);
                return 'while';
            
break;
case 8:
                console.log("reconoci el token <for> con lexema : "+yy_.yytext);
                return 'for';
            
break;
case 9:
                console.log("reconoci el token <do> con lexema : "+yy_.yytext);
                return 'do';
            
break;
case 10:
                console.log("reconoci el token <break> con lexema : "+yy_.yytext);
                return 'break';
            
break;
case 11:
                console.log("reconoci el token <continue> con lexema : "+yy_.yytext);
                return 'continue';
            
break;
case 12:
                console.log("reconoci el token <void> con lexema : "+yy_.yytext);
                return 'void';
            
break;
case 13:
                console.log("reconoci el token <switch> con lexema : "+yy_.yytext);
                return 'switch';
            
break;
case 14:
                console.log("reconoci el token <case> con lexema : "+yy_.yytext);
                return 'case';
            
break;
case 15:
                console.log("reconoci el token <default> con lexema : "+yy_.yytext);
                return 'default';
            
break;
case 16:
                console.log("reconoci el token <Println> con lexema : "+yy_.yytext);
                return 32;
            
break;
case 17:
                console.log("reconoci el token <Print> con lexema : "+yy_.yytext);
                return 33;
            
break;
case 18:
                console.log("reconoci el token <toLower> con lexema : "+yy_.yytext);
                return 'toLower';
            
break;
case 19:
                console.log("reconoci el token <toUpper> con lexema : "+yy_.yytext);
                return 'toUpper';
            
break;
case 20:
                console.log("reconoci el token <round> con lexema : "+yy_.yytext);
                return 'round';
            
break;
case 21:
                console.log("reconoci el token <length> con lexema : "+yy_.yytext);
                return 'length';
            
break;
case 22:
                console.log("reconoci el token <typeof> con lexema : "+yy_.yytext);
                return 'typeof';
            
break;
case 23:
                console.log("reconoci el token <toString> con lexema : "+yy_.yytext);
                return 'ToString';
            
break;
case 24:
                console.log("reconoci el token <toCharArray> con lexema : "+yy_.yytext);
                return 'toCharArray';
            
break;
case 25:
                console.log("reconoci el token <run> con lexema : "+yy_.yytext);
                return 'run';
               
break;
case 26:
                console.log("reconoci el token <new> con lexema : "+yy_.yytext);
                return 26;
               
break;
case 27:
                console.log("reconoci el token <int> con lexema : "+yy_.yytext);
                return 34;
               
break;
case 28:
                console.log("reconoci el token <run> con lexema : "+yy_.yytext);
                return 35;
               
break;
case 29:
                console.log("reconoci el token <run> con lexema : "+yy_.yytext);
                return 36;
               
break;
case 30:
                console.log("reconoci el token <run> con lexema : "+yy_.yytext);
                return 38;
               
break;
case 31:
                console.log("reconoci el token <run> con lexema : "+yy_.yytext);
                return 37;
               
break;
case 32:
                console.log("reconoci el token <true> con lexema : "+yy_.yytext);
                return 52;
               
break;
case 33:
                console.log("reconoci el token <false> con lexema : "+yy_.yytext);
                return 53;
               
break;
case 34:
                console.log("reconoci el token <DosPuntos> con lexema : "+yy_.yytext);
                return 23;
            
break;
case 35:
                console.log("reconoci el token <PuntoComa> con lexema : "+yy_.yytext);
                return 20;
            
break;
case 36:
                console.log("reconoci el token <ParentesisA> con lexema : "+yy_.yytext);
                return 17;
            
break;
case 37:
                console.log("reconoci el token <ParentesisC> con lexema : "+yy_.yytext);
                return 18;
            
break;
case 38:
                console.log("reconoci el token <CorcheteA> con lexema : "+yy_.yytext);
                return 24;
            
break;
case 39:
                console.log("reconoci el token <CorcheteC> con lexema : "+yy_.yytext);
                return 25;
            
break;
case 40:
                console.log("reconoci el token <LlaveA> con lexema : "+yy_.yytext);
                return 'LlaveA';
            
break;
case 41:
                console.log("reconoci el token <LlaveC> con lexema : "+yy_.yytext);
                return 'LlaveC';
            
break;
case 42:
                console.log("reconoci el token <mas> con lexema : "+yy_.yytext);
                return 30;
            
break;
case 43:
                console.log("reconoci el token <menos> con lexema : "+yy_.yytext);
                return 31;
            
break;
case 44:
                console.log("reconoci el token <multiplicacion> con lexema : "+yy_.yytext);
                return 41;
            
break;
case 45:
                console.log("reconoci el token <division> con lexema : "+yy_.yytext);
                return 39;
            
break;
case 46:
                console.log("reconoci el token <potencia> con lexema : "+yy_.yytext);
                return 42;
            
break;
case 47:
                console.log("reconoci el token <modulo> con lexema : "+yy_.yytext);
                return 40;
            
break;
case 48:
                console.log("reconoci el token <igualIf> con lexema : "+yy_.yytext);
                return 43;
            
break;
case 49:
                console.log("reconoci el token <diferente> con lexema : "+yy_.yytext);
                return 48;
            
break;
case 50:
                console.log("reconoci el token <menorIgual> con lexema : "+yy_.yytext);
                return 47;
            
break;
case 51:
                console.log("reconoci el token <mayorIgual> con lexema : "+yy_.yytext);
                return 46;
            
break;
case 52:
                console.log("reconoci el token <igual> con lexema : "+yy_.yytext);
                return 16;
            
break;
case 53:
                console.log("reconoci el token <menor> con lexema : "+yy_.yytext);
                return 45;
            
break;
case 54:
                console.log("reconoci el token <mayor> con lexema : "+yy_.yytext);
                return 44;
            
break;
case 55:
                console.log("reconoci el token <Interrogacion> con lexema : "+yy_.yytext);
                return 22;
            
break;
case 56:
                console.log("reconoci el token <or> con lexema : "+yy_.yytext);
                return 51;
            
break;
case 57:
                console.log("reconoci el token <and> con lexema : "+yy_.yytext);
                return 49;
            
break;
case 58:
                console.log("reconoci el token <not> con lexema : "+yy_.yytext);
                return 50;
            
break;
case 59:
                console.log("reconoci el token <char> con lexema : "+yy_.yytext);
                return 57;
            
break;
case 60:
                console.log("reconoci el token <cadena> con lexema : "+yy_.yytext);
                return 56;
            
break;
case 61:
                                console.log("reconoci el token <id> con lexema : "+yy_.yytext);
                                return 21;
                            
break;
case 62:
break;
case 63:
break;
case 64:
break;
case 65:
break;
case 66:return 5;
break;
case 67:
                console.log('Este es un error lexico : '+yy_.yytext+", en la linea : "+yy_.yylloc.first_line+", columna : "+yy_.yylloc.fisrt_column);
            
break;
}
},
rules: [/^(?:[0-9]+\.[0-9]+)/i,/^(?:[0-9]+)/i,/^(?:\/\/[^\n]*)/i,/^(?:\/\*[^"*/"]*\*\/)/i,/^(?:,)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:void\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:Println\b)/i,/^(?:Print\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:round\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:toString\b)/i,/^(?:toCharArray\b)/i,/^(?:run\b)/i,/^(?:new\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:string\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?::)/i,/^(?:;)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:\?)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:'[^\']?')/i,/^(?:"[^\"]*")/i,/^(?:([a-zA-ZñÑ])[a-zA-ZñÑ0-9_]*)/i,/^(?:\t)/i,/^(?:\r)/i,/^(?:\n)/i,/^(?:\s)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}